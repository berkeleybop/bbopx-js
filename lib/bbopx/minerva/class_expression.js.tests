////
//// Some unit testing for class_expression.js
////
//// Usage (rhino):
//// : rhino -modules external/bbop.js -modules staging/bbopx.js -opt 1 -f lib/bbopx/minerva/class_expression.js -f lib/bbopx/minerva/class_expression.js.tests -f -
////
//// Usage (node, test only):
//// : make bundle && NODE_PATH=external:staging node lib/bbopx/minerva/class_expression.js.tests
////
//// Usage (node, interactive debugging):
//// : make bundle && TEST=lib/bbopx/minerva/class_expression.js.tests NODE_PATH=external:staging:lib/bbopx/minerva node -e "eval(require('fs').readFileSync(process.env.TEST)+''); require('repl').start('> ')"
////

// Load bbop.
var bbop = require('bbop').bbop;
//var bbopx = require('bbopx').bbopx;
var bbopx = require('bbopx');
var mr_t = new bbop.test();

// Generic testers.
var same = mr_t.is_same_thing;
var diff = mr_t.is_different_thing;

//
function ll(x){
    if( x && x.structure ){
	console.log(JSON.stringify(x.structure(), null, ' '));
    }else{
	console.log(JSON.stringify(x, null, ' '));
    }
}

///
/// Start unit testing.
///

// Test nothing.
(function(){

    var ce = new bbopx.minerva.class_expression();

    same(ce.id().length == 36, true,
	 'id is like 8ccbf846-d7e8-4d86-9e5c-0b48827d178d');
    same(ce.nested_p(), false, 'not nested');
    same(ce.inferred_p(), false, 'not inferred');
    
    same(ce.category(), 'unknown', 'graphically a mystery');
    same(ce.type(), null, 'instance of nope');

    same(ce.class_id(), null, 'has no simple ID');
    same(ce.class_label(), null, 'has no label');

    same(ce.svf_class_expression(), null, 'nope SVF');
    same(ce.property_id(), null, 'nope pid');
    same(ce.property_label(), null, 'nope plbl');

    try {
	ce.structure();
	same(true, false, 'should never get here');
    }catch(e){	
	same(null, null, 'attempts at structure explode');
    }

})();

// Simple testing of simple properties, over three types of constructors.
(function(){

    var ce1 = new bbopx.minerva.class_expression(
	'GO:123');
    var ce2 = new bbopx.minerva.class_expression(
	{'type': 'Class', 'id': 'GO:123' });
    var ce3 = new bbopx.minerva.class_expression(
	new bbopx.minerva.class_expression('GO:123'));

    // Make sure that all constructors behave as expected.
    bbop.core.each([ce1, ce2, ce3], function(ce, i){

	same(ce.id().length == 36, true,
	     '['+i+'] id is like 8ccbf846-d7e8-4d86-9e5c-0b48827d178d');
	same(ce.nested_p(), false, '['+i+'] not nested');
	same(ce.inferred_p(), false, '['+i+'] not inferred');
	
	same(ce.category(), 'instance_of',
	     '['+i+'] graphically, is a simple class');
	same(ce.type(), 'class', '['+i+'] instance is type of class');
	
	same(ce.class_id(), 'GO:123', '['+i+'] has a simple ID');
	same(ce.class_label(), 'GO:123', '['+i+'] has a label');
	
	same(ce.svf_class_expression(), null, '['+i+'] not SVF');
	same(ce.property_id(), null, '['+i+'] no pid');
	same(ce.property_label(), null, '['+i+'] no plbl');
	
	same(ce.structure(), {'type': 'Class', 'id': 'GO:123' },
	     '['+i+'] correct trivial structure');

    });

})();

// Try SVF after the fact.
(function(){
    
    var ce = new bbopx.minerva.class_expression(null, true);    
    ce.as_svf('GO:123', 'RO:456');
    
    same(ce.id().length == 36, true,
	 '[ssvf] id is like 8ccbf846-d7e8-4d86-9e5c-0b48827d178d');
    same(ce.nested_p(), true, '[ssvf] svf always a little nested');
    same(ce.inferred_p(), true, '[ssvf] /is/ inferred'); // change of pace
    
    same(ce.category(), 'RO:456', '[ssvf] graphically, is a simple class');
    same(ce.type(), 'svf', '[ssvf] instance is type of svf');
    
    same(ce.class_id(), null, '[ssvf] has null ID--nested');
    same(ce.class_label(), null, '[ssvf] has null label--nested');
    
    same(ce.svf_class_expression().structure(), { type: 'Class', id: 'GO:123' },
	 '[ssvf] nested simple');
    same(ce.property_id(), 'RO:456', '[ssvf] has property id');
    same(ce.property_label(), 'RO:456', '[ssvf] had property lbl');
    
    same(ce.structure(),
	 {
	     'type': 'Restriction',
	     'onProperty': {
		 'type': 'ObjectProperty',
		 'id': 'RO:456'
	     },
	     'someValuesFrom': {
		 'type': 'Class',
		 'id': 'GO:123'
	     }
	 },
	 '[ssvf] correct trivial structure');
    
})();

// Try an after-the-fact intersection.
(function(){

    var ce = new bbopx.minerva.class_expression();
    ce.as_set('intersection',
    	      ['GO:123', new bbopx.minerva.class_expression('GO:456')]);
    
    same(ce.id().length == 36, true,
    	 '[sint] id is like 8ccbf846-d7e8-4d86-9e5c-0b48827d178d');
    same(ce.nested_p(), true, '[sint] sets always a little nested');
    same(ce.inferred_p(), false, '[sint] is not inferred');
    
    same(ce.category(), 'intersection', '[sint] graphically, is nested');
    same(ce.type(), 'intersection', '[sint] instance is type of intersection');
    
    same(ce.class_id(), null, '[sint] has null ID--nested');
    same(ce.class_label(), null, '[sint] has null label--nested');
    
    same(ce.svf_class_expression(), null, '[sint] not svf here');
    same(ce.property_id(), null, '[sint] has no property id');
    same(ce.property_label(), null, '[sint] has no property lbl');
    
    same(ce.structure(),
    	 {
	     'intersectionOf': [
    		 {
    		     'type': 'Class',
    		     'id': 'GO:123'
    		 },
    		 {
    		     'type': 'Class',
    		     'id': 'GO:456'
    		 }
    	     ]
    	 },
    	 '[sint] correct trivial structure');
    
})();

// Intersection nested into SVF.
(function(){

    var int_ce = new bbopx.minerva.class_expression();
    int_ce.as_set('intersection', ['GO:123', 'GO:456']);
    var ce = new bbopx.minerva.class_expression();
    ce.as_svf(int_ce, 'RO:123');

    same(ce.id().length == 36, true,
    	 '[svf(int)] id is like 8ccbf846-d7e8-4d86-9e5c-0b48827d178d');
    same(ce.nested_p(), true, '[svf(int)] sets always a little nested');
    same(ce.inferred_p(), false, '[svf(int)] is not inferred');
    
    same(ce.category(), 'RO:123', '[svf(int)] graphically a relation');
    same(ce.type(), 'svf', '[svf(int)] instance is type of svf');
    
    same(ce.class_id(), null, '[svf(int)] has null ID--nested');
    same(ce.class_label(), null, '[svf(int)] has null label--nested');
    
    same(ce.svf_class_expression().type(), 'intersection',
	 '[svf(int)] has svf ce');
    same(ce.property_id(), 'RO:123', '[svf(int)] has a property id');
    same(ce.property_label(), 'RO:123', '[svf(int)] has a property label');
    
    same(ce.structure(),
	 {
	     "type": "Restriction",
	     "onProperty": {
		 "type": "ObjectProperty",
		 "id": "RO:123"
	     },
	     "someValuesFrom": [
		 {
		     "intersectionOf": [
			 {
			     "type": "Class",
			     "id": "GO:123"
			 },
			 {
			     "type": "Class",
			     "id": "GO:456"
			 }
		     ]
		 }
	     ]
	 },
	 '[svf(int)] correct nested structure');
    
})();

// Toy REPL.
(function(){

    var union = bbopx.minerva.class_expression.union;
    var intersection = bbopx.minerva.class_expression.intersection;
    var svf = bbopx.minerva.class_expression.svf;
    var cls = bbopx.minerva.class_expression.cls;
    
    var x = svf(intersection([cls('GO:123'), 'GO:456']), 'RO:789');
    same(x.structure(),
	 {
	     "type": "Restriction",
	     "onProperty": {
		 "type": "ObjectProperty",
		 "id": "RO:789"
	     },
	     "someValuesFrom": [
		 {
		     "intersectionOf": [
			 {
			     "type": "Class",
			     "id": "GO:123"
			 },
			 {
			     "type": "Class",
			     "id": "GO:456"
			 }
		     ]
		 }
	     ]
	 },
	 '[static functions] correct nested structure');

})();

// // 
// (function(){
// })();

///
/// End unit testing.
///

// Final report.
mr_t.report();

////
//// Some unit testing for class_expression.js
////
//// Usage (rhino):
//// : rhino -modules external/bbop.js -modules staging/bbopx.js -opt 1 -f lib/bbopx/minerva/class_expression.js -f lib/bbopx/minerva/class_expression.js.tests -f -
////
//// Usage (node, test only):
//// : make bundle && NODE_PATH=external:staging node lib/bbopx/minerva/class_expression.js.tests
////
//// Usage (node, interactive debugging):
//// : make bundle && TEST=lib/bbopx/minerva/class_expression.js.tests NODE_PATH=external:staging:lib/bbopx/minerva node -e "eval(require('fs').readFileSync(process.env.TEST)+''); require('repl').start('> ')"
////

// Load bbop.
var bbop = require('bbop').bbop;
//var bbopx = require('bbopx').bbopx;
var bbopx = require('bbopx');
var mr_t = new bbop.test();

// Generic testers.
var same = mr_t.is_same_thing;
var diff = mr_t.is_different_thing;

//
function ll(x){
    if( x && x.structure ){
	console.log(JSON.stringify(x.structure(), null, ' '));
    }else{
	console.log(JSON.stringify(x, null, ' '));
    }
}

///
/// Start unit testing.
///

// Simple testing of simple properties.
(function(){

    var ce = new bbopx.minerva.class_expression('GO:123');

    same(ce.id().length == 36, true,
	 'id is like 8ccbf846-d7e8-4d86-9e5c-0b48827d178d');
    same(ce.nested_p(), false, 'not nested');
    same(ce.inferred_p(), false, 'not inferred');
    
    same(ce.category(), 'instance_of', 'graphically, is a simple class');
    same(ce.type(), 'class', 'instance is type of class');

    same(ce.class_id(), 'GO:123', 'has a simple ID');
    same(ce.class_label(), 'GO:123', 'has a label');

    same(ce.svf_class_expression(), null, 'not SVF');
    same(ce.property_id(), null, 'no pid');
    same(ce.property_label(), null, 'no plbl');

    same(ce.structure(), {'type': 'Class', 'id': 'GO:123' },
	 'correct trivial structure');

})();

// Same as before, but different args.
(function(){

    var ce = new bbopx.minerva.class_expression(
	{'type': 'Class', 'id': 'GO:123' });

    same(ce.id().length == 36, true,
	 '[2] id is like 8ccbf846-d7e8-4d86-9e5c-0b48827d178d');
    same(ce.nested_p(), false, '[2] not nested');
    same(ce.inferred_p(), false, '[2] not inferred');
    
    same(ce.category(), 'instance_of', '[2] graphically, is a simple class');
    same(ce.type(), 'class', '[2] instance is type of class');

    same(ce.class_id(), 'GO:123', '[2] has a simple ID');
    same(ce.class_label(), 'GO:123', '[2] has a label');

    same(ce.svf_class_expression(), null, '[2] not SVF');
    same(ce.property_id(), null, '[2] no pid');
    same(ce.property_label(), null, '[2] no plbl');

    same(ce.structure(), {'type': 'Class', 'id': 'GO:123' },
	 '[2] correct trivial structure');

})();

// // 
// (function(){
// })();

///
/// End unit testing.
///

// Final report.
mr_t.report();

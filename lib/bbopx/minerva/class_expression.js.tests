////
//// Some unit testing for class_expression.js
////
//// Usage (rhino):
//// : rhino -modules external/bbop.js -modules staging/bbopx.js -opt 1 -f lib/bbopx/minerva/class_expression.js -f lib/bbopx/minerva/class_expression.js.tests -f -
////
//// Usage (node, test only):
//// : make bundle && NODE_PATH=external:staging node lib/bbopx/minerva/class_expression.js.tests
////
//// Usage (node, interactive debugging):
//// : make bundle && TEST=lib/bbopx/minerva/class_expression.js.tests NODE_PATH=external:staging:lib/bbopx/minerva node -e "eval(require('fs').readFileSync(process.env.TEST)+''); require('repl').start('> ')"
////

// Load bbop.
var bbop = require('bbop').bbop;
//var bbopx = require('bbopx').bbopx;
var bbopx = require('bbopx');
var mr_t = new bbop.test();

// Generic testers.
var same = mr_t.is_same_thing;
var diff = mr_t.is_different_thing;

//
function ll(x){
    if( x && x.structure ){
	console.log(JSON.stringify(x.structure(), null, ' '));
    }else{
	console.log(JSON.stringify(x, null, ' '));
    }
}

///
/// Start unit testing.
///

// Simple testing of simple proprties.
(function(){

    var ce = new bbopx.minerva.class_expression('GO:123');

    same(ce.id().length == 36, true,
	 'id is like 8ccbf846-d7e8-4d86-9e5c-0b48827d178d');
    same(ce.nested_p(), false, 'not nested');
    same(ce.inferred_p(), false, 'not inferred');
    
    same(ce.category(), 'instance_of', 'graphically, is a simple class');
    same(ce.type(), 'class', 'instance is type of class');

    same(ce.class_id(), 'GO:123', 'has a simple ID');
    same(ce.class_label(), 'GO:123', 'has a label');

    same(ce.svf_class_expression(), null, 'not SVF');
    same(ce.property_id(), null, 'no pid');
    same(ce.property_label(), null, 'no plbl');

    same(ce.structure(), {'type': 'Class', 'id': 'GO:123' },
	 'correct trivial structure');

})();

// (function(){
//     var rv = new bbopx.minerva.request_variable('foo');
//     same(rv.value(), 'foo', 'constructor value');
//     same(rv.set_p(), true, 'set explicitly in constructor');
// })();

// (function(){
//     var rv = new bbopx.minerva.request_variable();
//     rv.value('foo');
//     same(rv.value(), 'foo', 'method value');
//     same(rv.set_p(), true, 'set explicitly in call');
// })();

// ///
// /// Requests
// ///

// // Check that two implicitly created individuals have autogenerated
// // IDs and that they are different.
// (function(){
//     var i1_req = new bbopx.minerva.request('individual', 'add');
//     i1_req.add_class_expression('GO:111');
    
//     var i2_req = new bbopx.minerva.request('individual', 'add');
//     i2_req.add_class_expression('GO:222');
    
//     var f_req = new bbopx.minerva.request('edge', 'add');
//     f_req.fact(i1_req.individual(), i2_req.individual(), 'is_a');
    
//     same(f_req.subject(), i1_req.individual(), 'same individual 1');
//     same(f_req.object(), i2_req.individual(), 'same individual 2');
//     diff(f_req.subject(), f_req.object(), 'but not same individual');
// })();

// // A more realistic example:
// (function(){
//     // 
//     var model_id = '123';

//     // New process individual.
//     var ind1_req = new bbopx.minerva.request('individual', 'add');
//     ind1_req.model(model_id);
//     ind1_req.add_class_expression('GO:0022008'); // neurogenesis
    
//     // New component (location) individual.
//     var ind2_req = new bbopx.minerva.request('individual', 'add');
//     ind2_req.model(model_id);
//     ind2_req.add_class_expression('CL:0000125'); // glial cell
    
//     // ind1 occurs_in ind2.
//     var e2_req = new bbopx.minerva.request('edge', 'add');
//     e2_req.model(model_id);
//     e2_req.fact(ind1_req.individual(), ind2_req.individual(), 'occurs_in');

//     same(ind1_req.objectify()['arguments']['assignToVariable'], 
// 	 ind1_req.individual(),
// 	 'var for ind');
//     same(e2_req.objectify()['arguments']['assignToVariable'],
// 	 null,
// 	 'no var for edge');
    
//     // // Toy run.
//     // var mid = 'gomodel:5515e3c80000001';
//     // var manager = new bbopx.minerva.manager('http://localhost:3400',
//     // 					'minerva_local',
//     // 					'123',
//     // 					'node');
//     // // 
//     // var each = bbop.core.each;
//     // each(['meta', 'merge', 'rebuild', 'error'], function(callback_type){
//     //     manager.register(callback_type, 'foo', function(resp, man){
//     // 	console.log(resp);
//     //     });
//     // // Call
//     // manager.DO_NOT_USE_THIS(mid);
// })();

// ///
// /// Request sets
// ///

// // Add handmade request and try decoding the payload (which would also
// // test structure()).
// (function(){
    
//     var reqs = new bbopx.minerva.request_set('foo');
//     var req = new bbopx.minerva.request('model', 'get');
//     req.model('123');
//     reqs.add(req, 'query'); // if not explicit, becomes 'action'
//     var args = reqs.callable();
    
//     same(args.token, 'foo', 'foo uid');
//     same(args.intention, 'query', 'information intent');
    
//     var blob = args.requests;
//     var deblob = decodeURIComponent(blob);
//     var jsblob = bbop.json.parse(deblob);
//     same(jsblob.length, 1, 'one request');
//     same(jsblob[0].entity, 'model', 'model entity');
//     same(jsblob[0].operation, 'get', 'get model');
//     same(jsblob[0].arguments.modelId, '123', 'model 123');
    
// })();

// // Two ways to add model id to a request.
// (function(){
    
//     var reqs1 = new bbopx.minerva.request_set('utoken', 'mid:123');
//     reqs1.add_simple_individual('GO:123');
//     var st1 = reqs1.structure();

//     var reqs2 = new bbopx.minerva.request_set('utoken');
//     reqs2.add_simple_individual('GO:123', 'mid:123');
//     var st2 = reqs1.structure();
    
//     same('mid:123',
// 	 st2['requests'][0]['arguments']['modelId'],
// 	 'correct model ID');
//     same(st1['requests'][0]['arguments']['modelId'],
// 	 st2['requests'][0]['arguments']['modelId'],
// 	 'two ways to add model');
// })();

// // Checking last_individual_id, last_fact_triple, and counting on the
// // stack.
// (function(){
    
//     var reqs = new bbopx.minerva.request_set('utoken', 'mid:123');
    
//     // Nothing there yet.
//     same(reqs.last_individual_id(), null,
// 	 'no last individial yet');
//     same(reqs.last_fact_triple(), null,
// 	 'no last edge yet');
    
//     // Add an individiual to the request stack.
//     reqs.add_simple_individual('GO:123');
//     same(reqs.last_individual_id(), // cheat to examine
// 	 reqs.structure()['requests'][0]['arguments']['assignToVariable'],
// 	 'seeing the last and only individual');
    
//     // Add an individiual to the request stack.
//     reqs.add_simple_individual('GO:456');
//     same(reqs.last_individual_id(), // cheat to examine
// 	 reqs.structure()['requests'][1]['arguments']['assignToVariable'],
// 	 'see the last individual on the stack');
    
//     // Check the countback versions of function.
//     same(reqs.last_individual_id(0), // cheat to examine
// 	 reqs.structure()['requests'][1]['arguments']['assignToVariable'],
// 	 'same as no argument');
//     same(reqs.last_individual_id(1), // cheat to examine
// 	 reqs.structure()['requests'][0]['arguments']['assignToVariable'],
// 	 'count back one');
 
//     // Still no edge.
//     same(reqs.last_fact_triple(), null,
// 	 'still no last edge');

//     // Add an edge.
//     reqs.add_fact(reqs.last_individual_id(1),
// 		  reqs.last_individual_id(0),
// 		  "ECO:123");
    
//     // We have our first edge?
//     same(reqs.last_fact_triple(),
// 	 [reqs.last_individual_id(1),
// 	  reqs.last_individual_id(0),
// 	  "ECO:123"],
// 	 'first edge as expected');
//     same(reqs.last_fact_triple(0),
// 	 [reqs.last_individual_id(1),
// 	  reqs.last_individual_id(0),
// 	  "ECO:123"],
// 	 'first edge, other reference');
//     same(reqs.last_fact_triple(1), null,
// 	 'out-of-bounds works with first edge');

//     // Add yet another individiual to the request stack (request #4)
//     reqs.add_simple_individual('GO:789');
//     same(reqs.last_individual_id(), // cheat to examine
// 	 reqs.structure()['requests'][3]['arguments']['assignToVariable'],
// 	 'see the last individual on the stack');
    
//     // Check that our countback frame has shifted.
//     same(reqs.last_individual_id(0), // cheat to examine
// 	 reqs.structure()['requests'][3]['arguments']['assignToVariable'],
// 	 'after adding edge, same as no argument');
//     same(reqs.last_individual_id(1), // cheat to examine
// 	 reqs.structure()['requests'][1]['arguments']['assignToVariable'],
// 	 'after adding edge, count back one');
//     same(reqs.last_individual_id(2), // cheat to examine
// 	 reqs.structure()['requests'][0]['arguments']['assignToVariable'],
// 	 'after adding edge, count back two');
    
//     // Check that out of bounds is okay.
//     same(reqs.last_individual_id(3),
// 	 null,
// 	 'there is nothing that far back');

//     // Add another edge to the stack.
//     reqs.add_fact(reqs.last_individual_id(1),
// 		  reqs.last_individual_id(0),
// 		  "ECO:456");

//     // We have our second edge?
//     same(reqs.last_fact_triple(),
// 	 [reqs.last_individual_id(1),
// 	  reqs.last_individual_id(0),
// 	  "ECO:456"],
// 	 'second edge as expected');
//     same(reqs.last_fact_triple(0),
// 	 [reqs.last_individual_id(1),
// 	  reqs.last_individual_id(0),
// 	  "ECO:456"],
// 	 'second edge, other reference');
//     // Another look at the first edge.
//     same(reqs.last_fact_triple(1),
// 	 [reqs.last_individual_id(2),
// 	  reqs.last_individual_id(1),
// 	  "ECO:123"],
// 	 'first edge still there');
//     same(reqs.last_fact_triple(2), null,
// 	 'out-of-bounds works with two edges');

// })();

// // Check annotations, which use a wrapping function to get all of the variations into a single bit of code (i.e. _op_annotation_to_target)
// //(function(){
  
// var mod = 'mid:123';
// var key = 'k';
// var value = 'v';
// var sub = 'GO:123';
// var ob = 'GO:123';
// var pred = 'ECO:001';

// ///
// /// Add all of the variations.
// ///

// var reqs = new bbopx.minerva.request_set('utoken', mod);

// reqs.add_annotation_to_model(key, value);
// reqs.remove_annotation_from_model(key, value);

// reqs.add_annotation_to_individual(key, value, sub);
// reqs.remove_annotation_from_individual(key, value, sub);

// reqs.add_annotation_to_fact(key, value, sub, ob, pred);
// reqs.remove_annotation_from_fact(key, value, sub, ob, pred);

// var all_requests = reqs.structure()['requests'];
// same(all_requests[0],
//      {
// 	 "entity": "model",
// 	 "operation": "add-annotation",
// 	 "arguments": {
// 	     "values": [
// 		 {
// 		     "key": "k",
// 		     "value": "v"
// 		 }
// 	     ],
// 	     "modelId": "mid:123"
// 	 }
//      },
//      'model add-annotation okay');
// same(all_requests[1],
//      {
// 	 "entity": "model",
// 	 "operation": "remove-annotation",
// 	 "arguments": {
// 	     "values": [
// 		 {
// 		     "key": "k",
// 		     "value": "v"
// 		 }
// 	     ],
// 	     "modelId": "mid:123"
// 	 }
//      },
//      'model remove-annotation okay');
// same(all_requests[2],
//      {
// 	 "entity": "individual",
// 	 "operation": "add-annotation",
// 	 "arguments": {
// 	     "individual": "GO:123",
// 	     "values": [
// 		 {
// 		     "key": "k",
// 		     "value": "v"
// 		 }
// 	     ],
// 	     "modelId": "mid:123"
// 	 }
//      },
//      'ind add-annotation okay');
// same(all_requests[3],
//      {
// 	 "entity": "individual",
// 	 "operation": "remove-annotation",
// 	 "arguments": {
// 	     "individual": "GO:123",
// 	     "values": [
// 		 {
// 		     "key": "k",
// 		     "value": "v"
// 		 }
// 	     ],
// 	     "modelId": "mid:123"
// 	 }
//      },
//      'ind remove-annotation okay');
// same(all_requests[4],
//      {
// 	 "entity": "fact",
// 	 "operation": "add-annotation",
// 	 "arguments": {
// 	     "subject": "GO:123",
// 	     "object": "GO:123",
// 	     "predicate": "ECO:001",
// 	     "values": [
// 		 {
// 		     "key": "k",
// 		     "value": "v"
// 		 }
// 	     ],
// 	     "modelId": "mid:123"
// 	 }
//      },
//      'fact add-annotation okay');
// same(all_requests[5],
//      {
// 	 "entity": "fact",
// 	 "operation": "remove-annotation",
// 	 "arguments": {
// 	     "subject": "GO:123",
// 	     "object": "GO:123",
// 	     "predicate": "ECO:001",
// 	     "values": [
// 		 {
// 		     "key": "k",
// 		     "value": "v"
// 		 }
// 	     ],
// 	     "modelId": "mid:123"
// 	 }
//      },
//      'fact remove-annotation okay');
     


// //});

// // TODO: Probe different ways of doing a "real" example.
// (function(){

//     var reqs = new bbopx.minerva.request_set('utoken', 'mid:123');

//     // axon guidance receptor activity
//     reqs.add_simple_individual('GO:0008046');
//     var mf = reqs.last_individual_id();
    
//     // neurogenesis
//     reqs.add_simple_individual('GO:0022008');
//     var bp = reqs.last_individual_id();
    
//     // cell part
//     reqs.add_simple_individual('GO:0004464');
//     var loc = reqs.last_individual_id();
    
//     // Drd3
//     reqs.add_simple_individual('MGI:MGI:94925');
//     var gp = reqs.last_individual_id();
    
//     reqs.add_fact(mf, bp, 'part_of');
    
//     // reqs.add_evidence_to_fact('ECO:0000001', ['PMID:0000000'],
//     // 			  mf, bp, 'part_of');
//     reqs.add_evidence_to_last_fact('ECO:0000001', ['PMID:0000000']);
    
//     // act occurs_in loc.
//     reqs.add_fact(mf, loc, 'RO:0002333');
    
//     // act enabled_by gp.
//     reqs.add_fact(mf, gp, 'occurs_in');
    
// })();

///
/// End unit testing.
///

// Final report.
mr_t.report();

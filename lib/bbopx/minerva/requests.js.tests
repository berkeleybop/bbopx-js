////
//// Some unit testing for bbop-mmm-requests.js
////
//// Usage (rhino):
//// : rhino -modules external/bbop.js -modules staging/bbopx.js -opt 1 -f lib/bbopx/minerva/requests.js -f lib/bbopx/minerva/requests.js.tests -f -
////
//// Usage (node, test only):
//// : make bundle && NODE_PATH=external:staging node lib/bbopx/minerva/requests.js.tests
////
//// Usage (node, interactive debugging):
//// : make bundle && TEST=lib/bbopx/minerva/requests.js.tests NODE_PATH=external:staging:lib/bpx/minerva node -e "eval(require('fs').readFileSync(process.env.TEST)+''); require('repl').start('> ')"
////

// Load bbop.
var bbop = require('bbop').bbop;
//var bbopx = require('bbopx').bbopx;
var bbopx = require('bbopx');
var mr_t = new bbop.test();

///
/// Start unit testing.
///

var same = mr_t.is_same_atom;
var diff = mr_t.is_different_atom;

///
/// Simple testing for request_variable.
///

(function(){
    var rv = new bbopx.minerva.request_variable();
    same(rv.value().length == 36, true,
	 'like 8ccbf846-d7e8-4d86-9e5c-0b48827d178d');
    same(rv.set_p(), false, 'not set');
})();

(function(){
    var rv = new bbopx.minerva.request_variable('foo');
    same(rv.value(), 'foo', 'constructor value');
    same(rv.set_p(), true, 'set explicitly in constructor');
})();

(function(){
    var rv = new bbopx.minerva.request_variable();
    rv.value('foo');
    same(rv.value(), 'foo', 'method value');
    same(rv.set_p(), true, 'set explicitly in call');
})();

///
/// Requests
///

// Check that two implicitly created individuals have autogenerated
// IDs and that they are different.
(function(){
    var i1_req = new bbopx.minerva.request('individual', 'add');
    i1_req.add_class_expression('GO:111');
    
    var i2_req = new bbopx.minerva.request('individual', 'add');
    i2_req.add_class_expression('GO:222');
    
    var f_req = new bbopx.minerva.request('edge', 'add');
    f_req.fact(i1_req.individual(), i2_req.individual(), 'is_a');
    
    same(f_req.subject(), i1_req.individual(), 'same individual 1');
    same(f_req.object(), i2_req.individual(), 'same individual 2');
    diff(f_req.subject(), f_req.object(), 'but not same individual');
})();

// A more realistic example:
(function(){
    // 
    var model_id = '123';

    // New process individual.
    var ind1_req = new bbopx.minerva.request('individual', 'add');
    ind1_req.model(model_id);
    ind1_req.add_class_expression('GO:0022008'); // neurogenesis
    
    // New component (location) individual.
    var ind2_req = new bbopx.minerva.request('individual', 'add');
    ind2_req.model(model_id);
    ind2_req.add_class_expression('CL:0000125'); // glial cell
    
    // ind1 occurs_in ind2.
    var e2_req = new bbopx.minerva.request('edge', 'add');
    e2_req.model(model_id);
    e2_req.fact(ind1_req.individual(), ind2_req.individual(), 'occurs_in');

    same(ind1_req.objectify()['assignToVariable'], 
	 ind1_req.individual(),
	 'var for ind');
    same(e2_req.objectify()['assignToVariable'],
	 null,
	 'no var for edge');
})();

///
/// Request sets
///

// 
(function(){
    
    var reqs = new bbopx.minerva.request_set('foo', 'information');
    var req = new bbopx.minerva.request('model', 'get');
    req.model('123');
    reqs.add(req);
    var args = reqs.callable();
    
    same(args.token, 'foo', 'foo uid');
    same(args.intention, 'information', 'information intent');
    
    var blob = args.requests;
    var deblob = decodeURIComponent(blob);
    var jsblob = bbop.json.parse(deblob);
    same(jsblob.length, 1, 'one request');
    same(jsblob[0].entity, 'model', 'model entity');
    same(jsblob[0].operation, 'get', 'get model');
    same(jsblob[0].arguments.modelId, '123', 'model 123');
    
})();

///
/// End unit testing.
///

// Final report.
mr_t.report();
